{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","node","getRef","_this","createDendrogram","console","log","data","margin","width","window","innerWidth","tree","d3","nodeSize","linkStepCurve","_ref","source","target","y","x","root","x0","dy","y0","descendants","forEach","d","i","id","_children","children","depth","name","length","svg","attr","style","gLink","append","gNode","update","duration","altKey","nodes","reverse","links","left","right","leftY","rightY","eachBefore","height","newWidth","Math","max","transition","tween","ResizeObserver","dispatch","selectAll","nodeEnter","enter","concat","clone","lower","nodeDiv","text","connection","on","merge","exit","remove","link","linkEnter","o","this","prevProps","prevState","snapshot","react_default","a","createElement","ref","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f686900.chunk.js","sourcesContent":["import * as d3 from 'd3'\nimport React, { Component } from 'react';\nimport './App.css';\nimport data from './data';\n\nclass App extends Component {\n\tnode = null;\n\n\tgetRef = (node) => {\n\t\tthis.node = node;\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.createDendrogram();\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\n\t\tthis.createDendrogram();\n\t}\n\n\tcreateDendrogram = () => {\n\t\tconsole.log(data);\n\t\tlet nodeWidth = 220;\n\t\tlet dx = 70;\n\t\tlet margin = ({\n\t\t\ttop: 10 + (dx / 2),\n\t\t\tright: 120,\n\t\t\tbottom: 10 + (dx / 2),\n\t\t\tleft: 40 + nodeWidth\n\t\t});\n\t\tlet width = window.innerWidth;\n\t\tlet dy = 350;\n\n\t\tlet tree = d3.tree().nodeSize([dx, dy]);\n\n\t\tlet linkStepCurve = ({source, target}) => {\n\t\t\treturn \"M\" + source.y + \",\" + source.x\n\t\t\t\t+ \"L\" + ((source.y * 4 + target.y * 1) / 5) + \",\" + source.x\n\t\t\t\t+ \"L\" + ((source.y * 4 + target.y * 1) / 5) + \",\" + target.x\n\t\t\t\t+ \"L\" + target.y + \",\" + target.x;\n\t\t};\n\n\t\tconst root = d3.hierarchy(data);\n\n\t\troot.x0 = dy / 2;\n\t\troot.y0 = 0;\n\t\troot.descendants().forEach((d, i) => {\n\t\t\td.id = i;\n\t\t\td._children = d.children;\n\t\t\tif (d.depth && d.data.name.length !== 7) d.children = null;\n\t\t});\n\n\t\t// const oldSvg = d3.select(this.node);\n\t\t// oldSvg.selectAll('.g-main').remove();\n\n\t\tconst svg = d3.select(this.node)\n\t\t\t.attr('width', width)\n\t\t\t.attr('height', dx)\n\t\t\t.attr('viewBox', [-margin.left, -margin.top, width, dx])\n\t\t\t.style('font', '10px sans-serif')\n\t\t\t.style('user-select', 'none');\n\t\t// .append('g')\n\t\t// .classed('g-main', true);\n\n\n\t\tconst gLink = svg.append('g')\n\t\t\t.attr('fill', 'none')\n\t\t\t.attr('stroke', '#555')\n\t\t\t.attr('stroke-opacity', 1)\n\t\t\t.attr('stroke-width', 1.5);\n\n\t\tconst gNode = svg.append('g')\n\t\t\t.attr('cursor', 'pointer');\n\n\t\tconst update = (source) => {\n\t\t\tconst duration = d3.event && d3.event.altKey ? 2500 : 250;\n\t\t\tconst nodes = root.descendants().reverse();\n\t\t\tconst links = root.links();\n\n\t\t\t// Compute the new tree layout.\n\t\t\ttree(root);\n\n\t\t\tlet left = root;\n\t\t\tlet right = root;\n\n\t\t\tlet leftY = root;\n\t\t\tlet rightY = root;\n\t\t\troot.eachBefore(node => {\n\t\t\t\tif (node.x < left.x) {\n\t\t\t\t\tleft = node;\n\t\t\t\t}\n\t\t\t\tif (node.x > right.x) {\n\t\t\t\t\tright = node;\n\t\t\t\t}\n\t\t\t\tif (node.y < leftY.y) {\n\t\t\t\t\tleft = node;\n\t\t\t\t}\n\t\t\t\tif (node.y > rightY.y) {\n\t\t\t\t\trightY = node;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst height = right.x - left.x + margin.top + margin.bottom;\n\t\t\tconst newWidth = Math.max(width, rightY.y - leftY.y + margin.left + margin.right);\n\n\t\t\tconst transition = svg.transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.attr('width', newWidth)\n\t\t\t\t.attr('height', height)\n\t\t\t\t.attr('viewBox', [-margin.left, left.x - margin.top, width, height])\n\t\t\t\t.tween('resize', window.ResizeObserver ? null : () => () => svg.dispatch('toggle'));\n\n\t\t\t// Update the nodesâ€¦\n\t\t\tconst node = gNode.selectAll('g')\n\t\t\t\t.data(nodes, d => d.id);\n\n\t\t\t// Enter any new nodes at the parent's previous position.\n\t\t\tconst nodeEnter = node.enter().append('g')\n\t\t\t\t.attr('transform', d => `translate(${source.y0},${source.x0})`)\n\t\t\t\t.attr('fill-opacity', 0)\n\t\t\t\t.attr('stroke-opacity', 0);\n\t\t\t\t// .on('click', d => {\n\t\t\t\t// \td.children = d.children ? null : d._children;\n\t\t\t\t// \tupdate(d);\n\t\t\t\t// });\n\n\t\t\tnodeEnter.append('circle')\n\t\t\t\t.attr('r', 2.5)\n\t\t\t\t.attr('fill', d => d._children ? '#555' : '#999');\n\n\t\t\tnodeEnter.append('text')\n\t\t\t\t.attr('dy', '0.31em')\n\t\t\t\t.attr('x', d => d._children ? -6 : 6)\n\t\t\t\t.attr('text-anchor', d => d._children ? 'end' : 'start')\n\t\t\t\t// .text(d => d.data.name)\n\t\t\t\t.clone(true).lower()\n\t\t\t\t.attr('stroke-linejoin', 'round')\n\t\t\t\t.attr('stroke-width', 3)\n\t\t\t\t.attr('stroke', 'white');\n\n\t\t\tlet nodeDiv = nodeEnter.append('foreignObject')\n\t\t\t\t.attr('x', -nodeWidth - 10)\n\t\t\t\t.attr('y', -(dx - 10) / 2)\n\t\t\t\t.attr('width', 250)\n\t\t\t\t.attr('height', 70)\n\t\t\t\t.append('xhtml:div')\n\t\t\t\t.append('div')\n\t\t\t\t.attr('class', 'node');\n\n\t\t\tnodeDiv.append('text')\n\t\t\t\t.text(d => d.data.name);\n\t\t\tnodeDiv.append('text')\n\t\t\t\t.attr('class', d => d.data.connection ? 'node-link' : 'd-none')\n\t\t\t\t.text(d => d.data.connection);\n\t\t\tnodeDiv.append('div')\n\t\t\t\t.attr('class', 'node-collapse')\n\t\t\t\t.attr('style', d => `display: ${d._children ? 'inherit' : 'none'}`)\n\t\t\t\t.text('+')\n\t\t\t\t.on('click', d => {\n\t\t\t\t\td.children = d.children ? null : d._children;\n\t\t\t\t\tupdate(d);\n\t\t\t\t});\n\n\t\t\t// Transition nodes to their new position.\n\t\t\tconst nodeUpdate = node.merge(nodeEnter).transition(transition)\n\t\t\t\t.attr('transform', d => `translate(${d.y},${d.x})`)\n\t\t\t\t.attr('fill-opacity', 1)\n\t\t\t\t.attr('stroke-opacity', 1);\n\n\t\t\t// Transition exiting nodes to the parent's new position.\n\t\t\tconst nodeExit = node.exit().transition(transition).remove()\n\t\t\t\t.attr('transform', d => `translate(${source.y},${source.x})`)\n\t\t\t\t.attr('fill-opacity', 0)\n\t\t\t\t.attr('stroke-opacity', 0);\n\n\t\t\t// Update the linksâ€¦\n\t\t\tconst link = gLink.selectAll('path')\n\t\t\t\t.data(links, d => d.target.id);\n\n\t\t\t// Enter any new links at the parent's previous position.\n\t\t\tconst linkEnter = link.enter()\n\t\t\t\t.append('path')\n\t\t\t\t.attr('d', d => {\n\t\t\t\t\tconst o = {\n\t\t\t\t\t\tx: d.source.x0,\n\t\t\t\t\t\ty: d.source.y0\n\t\t\t\t\t};\n\t\t\t\t\t// console.log(d);\n\t\t\t\t\treturn linkStepCurve({\n\t\t\t\t\t\tsource: o,\n\t\t\t\t\t\ttarget: o\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t// Transition links to their new position.\n\t\t\tlink.merge(linkEnter).transition(transition)\n\t\t\t\t.attr('d', linkStepCurve);\n\n\t\t\t// Transition exiting nodes to the parent's new position.\n\t\t\tlink.exit().transition(transition).remove()\n\t\t\t\t.attr('d', d => {\n\t\t\t\t\tconst o = {\n\t\t\t\t\t\tx: d.source.x,\n\t\t\t\t\t\ty: d.source.y\n\t\t\t\t\t};\n\t\t\t\t\treturn linkStepCurve({\n\t\t\t\t\t\tsource: o,\n\t\t\t\t\t\ttarget: o\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t// Stash the old positions for transition.\n\t\t\troot.eachBefore(d => {\n\t\t\t\td.x0 = d.x;\n\t\t\t\td.y0 = d.y;\n\t\t\t});\n\t\t};\n\n\t\tupdate(root);\n\t};\n\n\trender() {\n\t\treturn <svg ref={this.getRef}/>\n\t}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}